package com.todoapp.components;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.util.LinkedHashSet;

import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.RowFilter;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

public class TaskTable extends JTable {
    private DefaultTableModel tableModel;
    private int hoveredRow = -1;
    private LinkedHashSet<Integer> pinnedTaskRows;
    
    public TaskTable() {
        // Kh·ªüi t·∫°o model
        tableModel = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // ƒê·∫£m b·∫£o b·∫£ng ch·ªâ ƒë·ªçc
            }
            
            @Override
            public Class<?> getColumnClass(int columnIndex) {
                return String.class; // T·∫•t c·∫£ c√°c c·ªôt l√† String
            }
        };
        
        // Th√™m c√°c c·ªôt cho b·∫£ng
        tableModel.addColumn("Task");
        tableModel.addColumn("Due Date");
        tableModel.addColumn("Priority");
        tableModel.addColumn("Status");
        
        setModel(tableModel);
        
        // Thi·∫øt l·∫≠p thu·ªôc t√≠nh hi·ªÉn th·ªã
        setupTableProperties();
        
        // Th√™m c√°c cell renderer
        setupCellRenderers();
        
        // T·∫°o LinkedHashSet ƒë·ªÉ l∆∞u tr·∫°ng th√°i pin
        pinnedTaskRows = new LinkedHashSet<>();
    }
    
    private void setupTableProperties() {
        // Thi·∫øt l·∫≠p thu·ªôc t√≠nh UI cho b·∫£ng
        setRowHeight(30);
        setShowGrid(true);
        setGridColor(new Color(230, 230, 230));
        setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        setFillsViewportHeight(true);
        setIntercellSpacing(new Dimension(5, 5));
        
        // Thi·∫øt l·∫≠p thu·ªôc t√≠nh UI cho header
        JTableHeader header = getTableHeader();
        header.setFont(new Font("SansSerif", Font.BOLD, 12));
        header.setBackground(new Color(240, 240, 240));
        header.setReorderingAllowed(false); // Kh√¥ng cho ph√©p k√©o th·∫£ c·ªôt
        
        // Thi·∫øt l·∫≠p ƒë·ªô r·ªông c·ªôt
        TableColumnModel columnModel = getColumnModel();
        columnModel.getColumn(0).setPreferredWidth(300); // Task
        columnModel.getColumn(1).setPreferredWidth(100); // Due Date
        columnModel.getColumn(2).setPreferredWidth(80);  // Priority
        columnModel.getColumn(3).setPreferredWidth(100); // Status
    }
    
    private void setupCellRenderers() {
        // Renderer m·∫∑c ƒë·ªãnh cho t·∫•t c·∫£ c√°c c·ªôt
        DefaultTableCellRenderer defaultRenderer = new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                    boolean isSelected, boolean hasFocus, int row, int column) {
                
                Component component = super.getTableCellRendererComponent(table, value, 
                        isSelected, hasFocus, row, column);
                
                // Thi·∫øt l·∫≠p m√†u n·ªÅn d·ª±a tr√™n tr·∫°ng th√°i select ho·∫∑c hover
                if (isSelected) {
                    component.setBackground(new Color(173, 216, 230)); // Light blue for selection
                    component.setForeground(Color.BLACK);
                } else if (row == hoveredRow) {
                    component.setBackground(new Color(240, 248, 255)); // Lightest blue for hover
                    component.setForeground(Color.BLACK);
                } else {
                    // M√†u m·∫∑c ƒë·ªãnh cho background
                    component.setBackground(row % 2 == 0 ? 
                                 new Color(250, 250, 250) : Color.WHITE);
                    component.setForeground(Color.BLACK);
                    
                    // T√¥ m√†u ƒë·∫∑c bi·ªát cho c√°c c·ªôt Priority v√† Status
                    if (column == 2) { // Priority column
                        String priority = value != null ? value.toString() : "";
                        switch (priority) {
                            case "High":
                                component.setBackground(new Color(255, 200, 200)); // Light red
                                break;
                            case "Medium":
                                component.setBackground(new Color(255, 235, 200)); // Light orange
                                break;
                            case "Low":
                                component.setBackground(new Color(220, 255, 220)); // Light green
                                break;
                        }
                    } else if (column == 3) { // Status column
                        String status = value != null ? value.toString() : "";
                        switch (status) {
                            case "Completed":
                                component.setBackground(new Color(200, 230, 255)); // Sky blue
                                break;
                            case "In Progress":
                                component.setBackground(new Color(230, 220, 255)); // Light purple
                                break;
                            case "Pending":
                                component.setBackground(new Color(240, 240, 240)); // Light gray
                                break;
                        }
                    }
                }
                
                // CƒÉn gi·ªØa text cho c√°c c·ªôt Priority v√† Status
                if (column == 2 || column == 3) {
                    ((JLabel) component).setHorizontalAlignment(SwingConstants.CENTER);
                } else {
                    ((JLabel) component).setHorizontalAlignment(SwingConstants.LEFT);
                }
                
                // Thi·∫øt l·∫≠p font cho c·ªôt
                component.setFont(new Font("SansSerif", Font.PLAIN, 12));
                
                // Th√™m padding
                setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 5));
                
                return component;
            }
        };
        
        // ƒê·∫∑t renderer m·∫∑c ƒë·ªãnh cho t·∫•t c·∫£ c√°c c·ªôt
        for (int i = 0; i < getColumnCount(); i++) {
            getColumnModel().getColumn(i).setCellRenderer(defaultRenderer);
        }
        
        // Renderer ƒë·∫∑c bi·ªát cho c·ªôt Task ƒë·ªÉ hi·ªÉn th·ªã icon pin
        getColumnModel().getColumn(0).setCellRenderer(new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                    boolean isSelected, boolean hasFocus, int row, int column) {
                
                JLabel label = (JLabel) defaultRenderer.getTableCellRendererComponent(
                        table, value, isSelected, hasFocus, row, column);
                
                // Hi·ªÉn th·ªã icon pin cho nh·ªØng task ƒë∆∞·ª£c ghim
                int modelRow = table.convertRowIndexToModel(row);
                if (pinnedTaskRows.contains(modelRow)) {
                    label.setIcon(UIManager.getIcon("FileView.floppyDriveIcon"));
                    label.setText("üìå " + value); // Th√™m emoji pin
                    label.setIconTextGap(5); // Kho·∫£ng c√°ch gi·ªØa icon v√† text
                } else {
                    label.setIcon(null);
                }
                
                return label;
            }
        });
    }
    
    // Th√™m c√°c listeners cho b·∫£ng
    public void addTableMouseListeners() {
        // Mouse click listener cho vi·ªác l·ª±a ch·ªçn h√†ng v√† hi·ªÉn th·ªã menu ng·ªØ c·∫£nh
        addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int row = rowAtPoint(e.getPoint());
                
                // Right-click cho context menu
                if (SwingUtilities.isRightMouseButton(e) && row >= 0) {
                    setRowSelectionInterval(row, row);
                    // Context menu ƒë∆∞·ª£c x·ª≠ l√Ω ·ªü MainWindow
                }
                // Left-click ƒë·ªÉ ch·ªçn/b·ªè ch·ªçn h√†ng
                else if (row >= 0) {
                    if (isRowSelected(row)) {
                        clearSelection();
                    } else {
                        setRowSelectionInterval(row, row);
                    }
                }
            }
            
            @Override
            public void mouseExited(MouseEvent e) {
                // Reset hover state khi di chuy·ªÉn chu·ªôt ra kh·ªèi b·∫£ng
                hoveredRow = -1;
                repaint();
            }
        });
        
        // Mouse motion listener cho hover effect
        addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                int row = rowAtPoint(e.getPoint());
                
                if (row != hoveredRow) {
                    hoveredRow = row;
                    repaint(); // V·∫Ω l·∫°i v·ªõi tr·∫°ng th√°i hover m·ªõi
                }
            }
        });
        
        // B·∫Øt keyboard shortcuts
        addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                int selectedRow = getSelectedRow();
                
                switch (e.getKeyCode()) {
                    case KeyEvent.VK_DELETE:
                        // Delete key ƒë·ªÉ x√≥a task
                        if (selectedRow >= 0) {
                            // G·ª≠i th√¥ng b√°o x√≥a task
                            firePropertyChange("deleteTask", -1, selectedRow);
                        }
                        break;
                    case KeyEvent.VK_ENTER:
                        // Enter key ƒë·ªÉ s·ª≠a task
                        if (selectedRow >= 0) {
                            // G·ª≠i th√¥ng b√°o s·ª≠a task
                            firePropertyChange("editTask", -1, selectedRow);
                        }
                        break;
                    case KeyEvent.VK_P:
                        // P key ƒë·ªÉ pin/unpin task
                        if (selectedRow >= 0 && (e.isControlDown() || e.isMetaDown())) {
                            int modelRow = convertRowIndexToModel(selectedRow);
                            // G·ª≠i th√¥ng b√°o toggle pin
                            firePropertyChange("togglePin", -1, modelRow);
                        }
                        break;
                }
            }
        });
    }
    
    // Qu·∫£n l√Ω c√°c task ƒë∆∞·ª£c ghim
    public void updatePinnedTasks(LinkedHashSet<Integer> pinnedRows) {
        this.pinnedTaskRows = pinnedRows;
        repaint(); // V·∫Ω l·∫°i ƒë·ªÉ c·∫≠p nh·∫≠t icon pin
    }
    
    public DefaultTableModel getTableModel() {
        return tableModel;
    }
    
    public int getHoveredRow() {
        return hoveredRow;
    }
    
    public void setHoveredRow(int row) {
        this.hoveredRow = row;
    }
    
    // H√†m ti·ªán √≠ch ƒë·ªÉ l·∫•y task ƒë∆∞·ª£c ch·ªçn
    public String getSelectedTask() {
        int selectedRow = getSelectedRow();
        if (selectedRow >= 0) {
            int modelRow = convertRowIndexToModel(selectedRow);
            return (String) tableModel.getValueAt(modelRow, 0);
        }
        return null;
    }
    
    // H√†m ti·ªán √≠ch ƒë·ªÉ l·ªçc tasks theo ti√™u ch√≠
    public void filterTasks(String text) {
        TableRowSorter<TableModel> sorter = (TableRowSorter<TableModel>) getRowSorter();
        if (text == null || text.isEmpty()) {
            sorter.setRowFilter(null);
        } else {
            sorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
        }
    }
}